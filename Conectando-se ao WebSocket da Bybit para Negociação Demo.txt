Conectando-se ao WebSocket da Bybit para Negociação Demo e Gerando Assinaturas em Python1. Introdução: API WebSocket V5 da Bybit para Negociação DemoA Bybit oferece uma interface de programação de aplicações (API) robusta, permitindo que os usuários interajam programaticamente com a plataforma para executar ordens de negociação, acessar dados de mercado e gerenciar contas 1. Entre as várias funcionalidades da API, a interface WebSocket se destaca por sua capacidade de fornecer dados em tempo real com baixa latência, tornando-a particularmente útil para estratégias de negociação algorítmica e monitoramento de mercado em tempo real 2. As solicitações WebSocket para dados de mercado não são contabilizadas nos limites de taxa, o que representa uma vantagem significativa em comparação com a API REST para aplicações que exigem um fluxo constante de informações 2.Para facilitar o teste e o desenvolvimento de estratégias de negociação sem risco financeiro real, a Bybit disponibiliza um ambiente de negociação demo 3. Este ambiente simula as condições reais de negociação, permitindo que os usuários experimentem a funcionalidade completa da API em um ambiente seguro. A negociação demo é uma etapa crucial para desenvolvedores e traders quantitativos antes de implementar suas estratégias em um ambiente de negociação ao vivo 3.Este relatório tem como objetivo fornecer um guia detalhado sobre como conectar-se à API WebSocket V5 da Bybit no ambiente de negociação demo. O escopo deste documento abrange a identificação do endpoint correto do WebSocket, o processo de autenticação necessário para acessar fluxos de dados privados (os únicos suportados no WebSocket demo), a geração de assinaturas de autenticação usando Python e a demonstração de como se inscrever em fluxos de dados de mercado. Este guia é direcionado a desenvolvedores e traders quantitativos que buscam integrar a API da Bybit em suas aplicações usando a linguagem de programação Python. A API da Bybit permite a interação programática para diversas tarefas, como o envio e cancelamento de ordens, a verificação de dados de mercado e a gestão de contas, o que justifica o interesse em aprender a utilizá-la 1.2. Configurando sua Conta de Negociação Demo e Chaves de APIPara começar a usar a API WebSocket no ambiente de negociação demo da Bybit, é necessário primeiro configurar uma conta demo separada 3. É importante observar que a conta de negociação demo é um módulo isolado e funciona independentemente da conta principal 3. Para acessar a negociação demo, os usuários devem primeiro fazer login em sua conta principal na plataforma Bybit e, em seguida, alternar para o modo de "Negociação Demo" 3. Este ambiente de negociação possui sua própria identificação de usuário (UID), distinta da conta principal 3.Após acessar a interface de negociação demo, o próximo passo é gerar as chaves de API específicas para este ambiente 3. Para fazer isso, o usuário deve passar o mouse sobre o avatar do usuário e clicar em "API" para acessar a página de gerenciamento de API 3. Nesta seção, é possível criar um novo par de chaves de API: uma chave de API (um identificador público) e uma chave secreta (uma credencial privada usada para assinar solicitações) 3. É crucial observar que essas chaves de API demo são distintas das chaves geradas para a conta principal e devem ser usadas exclusivamente com o ambiente de negociação demo 3. A chave secreta é particularmente importante, pois é usada para gerar assinaturas que autenticam suas solicitações à API. Portanto, ela deve ser mantida confidencial para garantir a segurança da sua conta. A necessidade de uma conta demo separada e chaves de API dedicadas indica uma clara distinção entre os ambientes de teste e de negociação real dentro da infraestrutura da Bybit, o que minimiza o risco de ações não intencionais no ambiente de negociação real. Configurar corretamente a conta demo e gerar as chaves de API apropriadas é o passo fundamental para acessar o WebSocket de negociação demo da Bybit.3. Estabelecendo uma Conexão WebSocket com o Ambiente DemoO endpoint correto do WebSocket para se conectar ao ambiente de negociação demo da Bybit V5 é wss://stream-demo.bybit.com/v5 3. Esta URL é especificamente designada para o ambiente de teste e difere dos endpoints usados para a negociação na conta principal. Para fins de comparação, as URLs WebSocket da conta principal incluem wss://stream.bybit.com/v5 para fluxos públicos e wss://stream.bybit.com/v5/trade para fluxos privados e de negociação 3. A existência de URLs separadas para ambientes demo e principal, bem como para fluxos públicos e privados dentro do ambiente principal, demonstra uma arquitetura de API bem estruturada, projetada para diferentes níveis de acesso e propósitos. O fato de a URL demo suportar apenas fluxos privados, conforme observado na documentação, sugere um foco em testar funcionalidades relacionadas à negociação 3.Para estabelecer uma conexão WebSocket em Python, a biblioteca websocket-client é uma opção adequada 6. Alternativamente, a biblioteca asyncio pode ser utilizada para operações assíncronas, embora para uma demonstração inicial, websocket-client seja geralmente mais simples de implementar. O seguinte trecho de código conceitual ilustra como iniciar uma conexão básica usando websocket-client:Pythonimport websocket

def on_open(ws):
    print("Conexão aberta")

def on_message(ws, message):
    print(f"Mensagem recebida: {message}")

def on_error(ws, error):
    print(f"Erro: {error}")

def on_close(ws, close_status_code, close_msg):
    print("Conexão fechada")

if __name__ == "__main__":
    ws_url = "wss://stream-demo.bybit.com/v5"
    ws = websocket.WebSocketApp(ws_url,
                              on_open=on_open,
                              on_message=on_message,
                              on_error=on_error,
                              on_close=on_close)

    ws.run_forever()
Para maior clareza, a tabela a seguir resume as principais URLs WebSocket da Bybit V5:
AmbienteTipo de FluxoURLNegociação DemoPrivado/Negociaçãowss://stream-demo.bybit.com/v5MainnetPúblicowss://stream.bybit.com/v5MainnetPrivado/Negociaçãowss://stream.bybit.com/v5/tradeMainnet (Turquia)Privado/Negociaçãowss://stream.bybit-tr.com/v5/tradeMainnet (Cazaquistão)Privado/Negociaçãowss://stream.bybit.kz/v5/trade
Estabelecer uma conexão WebSocket com a URL demo correta usando uma biblioteca Python é o primeiro passo para interagir programaticamente com a API da Bybit no ambiente de teste.4. Entendendo o Processo de AutenticaçãoPara acessar fluxos de dados privados no WebSocket da Bybit V5, que são os únicos suportados no ambiente de negociação demo, é necessário passar por um processo de autenticação 3. Fluxos de dados públicos, por outro lado, não exigem autenticação 3. A autenticação é crucial para garantir que apenas usuários autorizados possam acessar informações confidenciais e executar ações de negociação.O processo de autenticação envolve o envio de uma mensagem JSON específica através da conexão WebSocket logo após a sua abertura 4. Esta mensagem de autenticação possui uma estrutura bem definida, contendo um campo "op" definido como "auth" e um campo "args" que é um array com três elementos na seguinte ordem: sua chave de API demo, um timestamp de expiração e uma assinatura gerada usando sua chave secreta demo 4.O timestamp de expiração (expires) é um valor inteiro que representa um momento no futuro em milissegundos desde a época Unix 4. É recomendável definir este valor para um tempo ligeiramente superior ao momento atual. Este timestamp serve como uma medida de segurança para evitar ataques de repetição. Em Python, um timestamp de expiração válido pode ser gerado da seguinte forma:Pythonimport time

expires = int((time.time() + 1) * 1000)
A assinatura é um hash HMAC-SHA256 gerado usando sua chave secreta demo e uma string específica no formato "GET/realtime{expires}", onde {expires} é o timestamp de expiração gerado no passo anterior 4. É fundamental usar a chave secreta demo para este processo, pois chaves da conta principal não funcionarão no ambiente demo, e vice-versa. A assinatura serve como prova de que a solicitação é originária do proprietário da chave de API e não foi adulterada. A geração da assinatura em Python pode ser feita usando as bibliotecas hmac e hashlib:Pythonimport hmac
import hashlib

api_secret = "SUA_CHAVE_SECRETA_DEMO"  # Substitua pela sua chave secreta demo
expires = int((time.time() + 1) * 1000)
signature_payload = f"GET/realtime{expires}"
signature = hmac.new(api_secret.encode('utf-8'),
                     signature_payload.encode('utf-8'),
                     hashlib.sha256).hexdigest()
Finalmente, a mensagem de autenticação completa é um objeto JSON construído com a chave de API demo, o timestamp de expiração e a assinatura gerada:Pythonimport json

api_key = "SUA_CHAVE_DE_API_DEMO"  # Substitua pela sua chave de API demo
auth_payload = {
    "op": "auth",
    "args": [api_key, expires, signature]
}
auth_message = json.dumps(auth_payload)
A estrutura específica da assinatura, incluindo o prefixo "GET/realtime" e o timestamp de expiração, ressalta o design de segurança da Bybit, garantindo que cada tentativa de autenticação seja sensível ao tempo e vinculada a uma chave específica. O uso do algoritmo HMAC-SHA256 é uma prática padrão para autenticação segura em APIs. Um problema relatado na comunidade online 7, onde um usuário recebeu um erro de "API key is invalid" apesar da autenticação aparentemente bem-sucedida, sugere que mesmo um pequeno erro na geração da assinatura ou no formato do payload de autenticação pode levar a falhas na autenticação. Isso enfatiza a importância de seguir a documentação oficial com precisão. Compreender e implementar corretamente o processo de autenticação, principalmente a geração da assinatura, é fundamental para acessar os fluxos privados no WebSocket demo da Bybit.5. Implementação em Python com websocket-clientPara começar, é necessário instalar a biblioteca websocket-client usando o gerenciador de pacotes pip: pip install websocket-client.O seguinte exemplo de código Python demonstra como conectar-se ao WebSocket de negociação demo da Bybit e realizar a autenticação:Pythonimport websocket
import json
import time
import hmac
import hashlib

# Substitua pelas suas chaves de API demo
api_key = "SUA_CHAVE_DE_API_DEMO"
api_secret = "SUA_CHAVE_SECRETA_DEMO"
ws_url = "wss://stream-demo.bybit.com/v5"

def generate_signature(secret, expires):
    signature_payload = f"GET/realtime{expires}"
    signature = hmac.new(secret.encode('utf-8'),
                         signature_payload.encode('utf-8'),
                         hashlib.sha256).hexdigest()
    return signature

def on_open(ws):
    print("Conexão aberta, autenticando...")
    expires = int((time.time() + 1) * 1000)
    signature = generate_signature(api_secret, expires)
    auth_payload = {
        "op": "auth",
        "args": [api_key, expires, signature]
    }
    ws.send(json.dumps(auth_payload))

def on_message(ws, message):
    print(f"Mensagem recebida: {message}")
    try:
        response = json.loads(message)
        if response.get("op") == "auth" and response.get("success"):
            print("Autenticação bem-sucedida!")
            # Aqui você pode se inscrever em tópicos de dados de mercado
            subscribe_payload = {
                "op": "subscribe",
                "args":
            }
            ws.send(json.dumps(subscribe_payload))
        elif response.get("op") == "subscribe" and response.get("success"):
            print(f"Inscrição bem-sucedida em: {response.get('args')}")
    except json.JSONDecodeError:
        pass

def on_error(ws, error):
    print(f"Erro: {error}")

def on_close(ws, close_status_code, close_msg):
    print("Conexão fechada")

if __name__ == "__main__":
    ws = websocket.WebSocketApp(ws_url,
                              on_open=on_open,
                              on_message=on_message,
                              on_error=on_error,
                              on_close=on_close)

    ws.run_forever()
Neste código, a função generate_signature encapsula a lógica para criar a assinatura de autenticação. A função on_open é chamada quando a conexão WebSocket é estabelecida. Dentro dela, o timestamp de expiração e a assinatura são gerados, e a mensagem de autenticação é enviada para o servidor. A função on_message processa as mensagens recebidas do servidor. Ela verifica a resposta de autenticação e, em caso de sucesso, envia uma mensagem de inscrição para os tópicos de dados de mercado desejados (neste exemplo, trades públicos e o livro de ofertas de nível 1 para BTCUSDT). As funções on_error e on_close lidam com erros e o fechamento da conexão, respectivamente. A necessidade de lidar com diferentes eventos WebSocket (open, message, error, close) demonstra a natureza assíncrona da comunicação WebSocket. O loop run_forever() mantém a conexão ativa e aguarda as mensagens recebidas. Este exemplo prático fornece um ponto de partida para os usuários se conectarem e se autenticarem com o WebSocket demo da Bybit, bastando substituir as placeholders pelas suas próprias chaves de API demo.6. Inscrevendo-se em Fluxos de Dados de MercadoApós a autenticação bem-sucedida, é possível se inscrever em diferentes tópicos de dados de mercado enviando mensagens de inscrição em formato JSON através da conexão WebSocket estabelecida. Uma mensagem de inscrição típica tem a seguinte estrutura: {"op": "subscribe", "args": ["tópico1", "tópico2", ...]}.Alguns exemplos de tópicos de dados de mercado comuns incluem:
publicTrade.BTCUSDT: Fornece os trades mais recentes para o par BTCUSDT.
orderbook.1.BTCUSDT: Fornece atualizações do livro de ofertas de nível 1 para BTCUSDT.
tickers.BTCUSDT: Fornece informações resumidas do ticker para BTCUSDT.
Para se inscrever em um desses tópicos, basta enviar a mensagem JSON correspondente através da conexão WebSocket usando o método ws.send(json.dumps(payload_de_inscricao)), conforme demonstrado no exemplo de código da seção anterior. Por exemplo, para se inscrever nos trades mais recentes de BTCUSDT, a seguinte carga útil seria enviada:JSON{"op": "subscribe", "args":}
O servidor então começará a enviar dados de mercado em tempo real como mensagens JSON através da função on_message definida no seu script WebSocket. É importante implementar a lógica dentro desta função para analisar e processar esses dados conforme necessário para sua estratégia de negociação ou análise.Da mesma forma, para cancelar a inscrição em um tópico, a operação "unsubscribe" é utilizada com o mesmo formato de argumentos: {"op": "unsubscribe", "args":}.O modelo de inscrição da API WebSocket permite que os usuários recebam seletivamente apenas os dados de que precisam, reduzindo o uso de largura de banda e a sobrecarga de processamento. Embora os trechos de pesquisa fornecidos não detalhem todos os tópicos de inscrição disponíveis para a V5, a estrutura geral é consistente comumente em APIs WebSocket. Para uma lista completa e detalhada dos tópicos disponíveis, é essencial consultar a documentação oficial da API WebSocket V5 da Bybit.7. ConclusãoEste relatório detalhou o processo de conexão à API WebSocket V5 da Bybit no ambiente de negociação demo, abrangendo desde a configuração da conta e a geração das chaves de API até a autenticação e a inscrição em fluxos de dados de mercado usando Python. Os passos essenciais incluem obter as chaves de API demo, estabelecer uma conexão WebSocket com o endpoint wss://stream-demo.bybit.com/v5, gerar um timestamp de expiração e uma assinatura usando a chave secreta demo, enviar a mensagem de autenticação e, finalmente, inscrever-se nos tópicos de dados desejados.É fundamental ressaltar a importância de consultar a documentação oficial da API da Bybit para obter informações mais avançadas, uma lista completa de tópicos disponíveis, detalhes sobre códigos de erro e limites de taxa 1. A documentação oficial é a fonte mais confiável e atualizada para todas as funcionalidades e especificações da API.Como próximos passos, os usuários podem explorar a implementação de lógica de negociação com base nos dados de mercado recebidos, o tratamento de diferentes tipos de dados e a possível exploração de outros fluxos WebSocket, caso se tornem disponíveis para o ambiente demo no futuro. Recomenda-se enfaticamente que os usuários utilizem o ambiente de negociação demo de forma completa para testar suas estratégias e aplicações antes de operar com fundos reais. A familiarização com a API no ambiente demo é um passo crucial para garantir a execução segura e eficaz de estratégias de negociação no mercado real.
