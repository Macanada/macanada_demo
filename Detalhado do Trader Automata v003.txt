Detalhado do Trader Automata v003

1. Descrição Geral da app
O Trader Automata é uma automação desenvolvida em Python para operar no mercado Spot de criptomoedas. Ele executa estratégias de compra e venda baseadas em parâmetros configuráveis, como:
Preço médio de compra.
Percentual de lucro.
Percentual de queda para recompra.
Número máximo de recompras.
Fatores multiplicadores para lucro e queda.
Conexão com exchanges (Bybit Main, Bybit Demo, Binance Main, Testnet).
O bot permite salvar e carregar configurações, realizar backtests e operar em ambientes reais e de testes.
2. Funcionalidades Principais
Conexão com exchanges: Bybit (Main e Demo), Binance e Testnets.
Configuração de estratégias personalizadas.
Execução automática de ordens de compra, venda, recompra e cancelamento.
Gerenciamento seguro de chaves API (criptografadas).
Backtests com dados históricos públicos.
Sistema de logs para monitoramento e depuração.

3. Configuração da Estratégia
Menu da estratégia:

### Item 1: qty_inicial : 300 (USDT “Moeda base” início do ciclo principal)
### Item 1.1: multiplicador_qty : 1.02 (multiplicador para reduzir, ampliar ou manter a quantidade da ordem de compra para o próximo ciclo de recompra)
### Item 1.1a: qty_minima : 50 (USDT “Moeda base” “esse é o valor mínimo que o cálculo do multiplicador pode reduzir o valor da ordem”)
### Item 1.1b: qty_maxima : 600 (USDT “Moeda base” “esse é o valor máximo que o cálculo do multiplicador pode ampliar o valor da ordem”)
### Item 2: lucro_alvo_inicial : 0.035 (3.5% lucro alvo inicial)
### Item 2.1: multiplicador_lucro : 0.95 (multiplicador para reduzir, ampliar ou manter o % de lucro da ordem de venda do próximo ciclo de recompra)
### Item 2.1a: lucro_alvo_minimo : 0.005 (0.5% “lucro alvo mínimo que o cálculo do multiplicador pode ser reduzido”)
### Item 2.1b: lucro_alvo_máximo : 0.05 (5% “lucro alvo máximo que o cálculo do multiplicador pode ser ampliado”)
### Item 3: recompra_queda_inicial : 0.01 (1% “percentual de queda para recompra inicial)
### Item 3.1: multiplicador_recompra : 1 (multiplicador para reduzir, ampliar ou manter o % de queda da ordem de compra em cada ciclo de recompra)
### Item 3.1a: recompra_queda_minimo : 0.005 (0.5% “queda mínima que o cálculo do multiplicador pode ser reduzido, diferença mínima entre uma ordem de compra e outra”)
### Item 3.1b: recompra_queda_máximo : 0.03 (3% “queda máxima que o cálculo do multiplicador pode ser ampliado, diferença máxima entre uma ordem de compra e outra”)
### Item 3.1c: limite_recompras : 20 (Número máximo de recompras)
### Item 4: taxa : 0.001 (0.1% Taxa de transação)
### Item 5: saldo_limite : 5000 (limite de saldo para as operações, 0 = uso total do saldo disponível na wallet)
### Item 6: lucro_reaplicar (s/n) : s (“s” usará o lucro adquirido em cada ciclo para incrementar o valor da ordem de compra (lucro adquirido no ciclo anterior ÷ (limite_recompras + 1) = a quantidade a ser acrescida nas ordens de compra do próximo ciclo ), “n” não utiliza esta função)
### Item 7: imprimir_estrategia  (neste item o app imprimirá na tela a estratégia com o custo total da operação, baseado em todos os parâmetros recém configurados)
### Item 8: salvar_estrategia (s/n) : s (“s” salva a estratégia em arquivo .js, “n” continua sem salvar a configuração da estratégia)
### Item 9: executar_estrategia (s/n) : s (“s” executa a estratégia, “n” vai para o ### Item 10)
### Item 10: configurar_nova_estrategia (s/n) : s (“s” reinicia o processo de configuração para um nova estratégia, “n” sair do app)

Todos os itens terão estes valores pré determinados, caso o usuário não digite um valor, o valor pré determinado será validado.
3. Explicação Detalhada dos Itens da Estratégia

### Item 1: qty_inicial :300 (USDT “Moeda base” início do ciclo principal)
Descrição: Este parâmetro define a quantidade inicial, em USDT (ou outra moeda base escolhida), da primeira ordem de compra que o bot realizará no início do ciclo principal de negociação. Esta será uma ordem a mercado. As ordens de compra subsequentes (recompras) serão ordens limit com preços calculados com base no preço da compra anterior e no percentual de queda definido no Item 3.
Exemplo:
'qty_inicial': 300.0

O bot iniciará a operação comprando o equivalente a 300 USDT da criptomoeda selecionada, ao preço de mercado.
Código Relacionado:
Python
# Carrega o valor da ordem inicial
quantidade_inicial = estrategia['qty_inicial']

# Execução da primeira ordem de compra a mercado
exchange.create_market_buy_order(par, quantidade_inicial)


### Item 1.1: multiplicador_qty: 1.02 (multiplicador para reduzir, ampliar ou manter a quantidade da ordem de compra para o próximo ciclo de recompra)
Descrição: Este fator multiplicador permite ajustar a quantidade da ordem de compra para o próximo ciclo de recompra. Ele é aplicado somente durante os ciclos de recompra, após a ordem inicial.
Exemplo:
'multiplicador_qty': 1: Se a compra inicial for de 300 USDT, todas as próximas compras (dentro do ciclo principal e de recompras) também serão de 300 USDT.
'multiplicador_qty': 1.03: Se a compra inicial for de 300 USDT, a primeira recompra poderia ser de 309 USDT (300 * 1.03), a segunda de aproximadamente 318.27 USDT (309 * 1.03), e assim por diante, até atingir o limite máximo definido em qty_maxima.
Código Relacionado (Lógica):
Python
# Calcula a quantidade da próxima ordem de recompra
quantidade_anterior = ... # Quantidade da ordem de compra anterior
multiplicador = estrategia['multiplicador_qty']
quantidade_proxima = quantidade_anterior * multiplicador

# Aplica limites
quantidade_proxima = max(estrategia['qty_minima'], min(quantidade_proxima, estrategia['qty_maxima']))

fórmulas:
Uma forma de "ponderar" a interpolação, para que a distribuição dos pontos entre o início e o fim não seja uniforme, mas sim ajustável por um "multiplicador".
Infelizmente, a interpolação linear padrão não oferece essa flexibilidade. Ela sempre produz uma distribuição uniforme dos pontos ao longo da linha reta entre os valores inicial e final.
Para obter o comportamento desejado, você precisará recorrer à interpolação não linear ou criar uma função personalizada que simule o efeito de um "multiplicador".
Interpolação Não Linear
Interpolação Polinomial:
Você pode usar polinômios de graus mais altos (como interpolação quadrática ou cúbica) para criar curvas que não sejam linhas retas.
Ao ajustar os coeficientes do polinômio, você pode controlar a "curvatura" da sequência e, portanto, a distribuição dos pontos.
A biblioteca SciPy em Python oferece funções para interpolação polinomial.
Interpolação Spline:
Splines são curvas suaves compostas por segmentos polinomiais.
Elas oferecem maior flexibilidade do que polinômios de grau único e são frequentemente usadas em gráficos e animações.
A SciPy também fornece funções para interpolação spline.
Função Personalizada
Uma abordagem mais flexível seria criar uma função personalizada que pondera os pontos intermediários com base em um "multiplicador".
Por exemplo, você pode usar uma função exponencial ou logarítmica para criar uma distribuição não uniforme dos pontos.
A vantagem dessa abordagem é que você tem controle total sobre o comportamento da sequência.
Considerações:
A interpolação não linear é mais complexa do que a interpolação linear e pode exigir mais cálculos.
A criação de uma função personalizada oferece a maior flexibilidade, mas também exige mais conhecimento em matemática.
Exemplo com interpolação não linear (Spline):
Python
import numpy as np
from scipy.interpolate import interp1d
import matplotlib.pyplot as plt

def interpolacao_spline(inicio, fim, num_pontos, multiplicador):
    x = np.linspace(0, 1, num_pontos)
    y_linear = np.linspace(inicio, fim, num_pontos)

    # Aplica o multiplicador para distorcer a curva
    x_distorcido = x**multiplicador

    f = interp1d([0, 1], [inicio, fim], kind='quadratic')
    y_spline = f(x_distorcido)

    return y_spline.tolist()

inicio = 300
fim = 600
num_pontos = 21
multiplicador = 2 # Ajuste o multiplicador para controlar a distorção

sequencia_spline = interpolacao_spline(inicio, fim, num_pontos, multiplicador)

print(sequencia_spline)

plt.plot(sequencia_spline)
plt.show()



Nesse exemplo, a variável "multiplicador" tem o poder de distorcer a curva, e assim, mudar a distribuição dos valores entre o inicio e o fim.


Item 1.1a: qty_minima : 50 (USDT “Moeda base” “esse é o valor mínimo que o cálculo do multiplicador pode reduzir o valor da ordem”)
Descrição: Define o valor mínimo em USDT (ou moeda base) que a quantidade de uma ordem de compra pode atingir, mesmo após a aplicação do multiplicador_qty. Isso garante que as ordens de recompra não sejam muito pequenas.
Exemplo: Se o multiplicador_qty fosse menor que 1 e a quantidade calculada caísse abaixo de 50 USDT, o bot ajustaria a quantidade para 50 USDT.

Item 1.1b: qty_maxima : 600 (USDT “Moeda base” “esse é o valor máximo que o cálculo do multiplicador pode ampliar o valor da ordem”)
Descrição: Define o valor máximo em USDT (ou moeda base) que a quantidade de uma ordem de compra pode atingir, mesmo após a aplicação do multiplicador_qty. Isso evita que as ordens de recompra se tornem excessivamente grandes.
Exemplo: Se o multiplicador_qty fosse maior que 1 e a quantidade calculada ultrapassasse 600 USDT, o bot limitaria a quantidade a 600 USDT.

Item 2: lucro_alvo_inicial : 0.035 (3.5% lucro alvo inicial)
Descrição: Este parâmetro define a meta de lucro percentual desejada para o primeiro ciclo de venda após a compra inicial. Quando o preço médio de compra, acrescido deste percentual, for atingido, o bot tentará vender a posição.
Exemplo: Se o preço médio de compra for de $100, o bot tentará vender quando o preço atingir $103.50 (100 * (1 + 0.035)).

Item 2.1: multiplicador_lucro : 0.95 (multiplicador para reduzir, ampliar ou manter o % de lucro da ordem de venda do próximo ciclo de recompra)
Descrição: Este multiplicador ajusta o percentual de lucro alvo para as vendas que ocorrem após ciclos de recompra. Ele permite que você seja mais ou menos agressivo na busca por lucro a cada ciclo.
Exemplo:
Se o lucro_alvo_inicial for 3.5% e o multiplicador_lucro for 0.95, o próximo lucro alvo após uma recompra seria de aproximadamente 3.325% (3.5 * 0.95).
Se o multiplicador_lucro fosse maior que 1, o lucro alvo aumentaria a cada ciclo.

Item 2.1a: lucro_alvo_minimo : 0.005 (0.5% “lucro alvo mínimo que o cálculo do multiplicador pode ser reduzido”)
Descrição: Define o percentual mínimo de lucro que o bot buscará, mesmo após a aplicação do multiplicador_lucro. Isso garante que o bot não tente vender com um lucro muito baixo.
Exemplo: Se o multiplicador_lucro reduzir o lucro alvo calculado para abaixo de 0.5%, o bot utilizará 0.5% como meta de lucro.

Item 2.1b: lucro_alvo_máximo : 0.05 (5% “lucro alvo máximo que o cálculo do multiplicador pode ser ampliado”)
Descrição: Define o percentual máximo de lucro que o bot buscará, mesmo após a aplicação do multiplicador_lucro. Isso pode ser útil para limitar a ganância em mercados muito voláteis.
Exemplo: Se o multiplicador_lucro aumentar o lucro alvo calculado para acima de 5%, o bot utilizará 5% como meta de lucro.

Item 3: recompra_queda_inicial : 0.01 (1% “percentual de queda para recompra inicial)
Descrição: Define o percentual de queda no preço a partir da última ordem de compra para que o bot realize uma nova ordem de compra (recompra).
Exemplo: Se a última compra foi a $100, o bot aguardará uma queda para $99 (100 * (1 - 0.01)) para realizar a próxima recompra.
Código Relacionado:
Python
# Calcula o preço de recompra
preco_ultimo = ... # Preço da última ordem de compra
percentual_queda = estrategia['recompra_queda_inicial']
preco_recompra = preco_ultimo * (1 - percentual_queda)

# Envia ordem de recompra (limitada)
exchange.create_limit_buy_order(par, quantidade_proxima, preco_recompra)


Item 3.1: multiplicador_recompra : 1 (multiplicador para reduzir, ampliar ou manter o % de queda da ordem de compra em cada ciclo de recompra)
Descrição: Este multiplicador ajusta o percentual de queda necessário para a próxima recompra. Ele permite que você torne as recompras mais ou menos sensíveis à queda de preço a cada ciclo.
Exemplo:
'multiplicador_recompra': 1: O percentual de queda para recompra permanecerá o mesmo a cada ciclo (1% neste caso).
'multiplicador_recompra': 1.05: O percentual de queda necessário para a próxima recompra aumentará a cada ciclo. Se a queda inicial for de 1%, a próxima seria de 1.05%, depois 1.1025%, e assim por diante.
'multiplicador_recompra': 0.95: O percentual de queda necessário para a próxima recompra diminuirá a cada ciclo.

Item 3.1a: recompra_queda_minimo : 0.005 (0.5% “queda mínima que o cálculo do multiplicador pode ser reduzido, diferença mínima entre uma ordem de compra e outra”)
Descrição: Define o percentual mínimo de queda que o bot exigirá para realizar uma recompra, mesmo após a aplicação do multiplicador_recompra. Isso garante que as ordens de recompra não sejam acionadas por quedas de preço muito pequenas.

Item 3.1b: recompra_queda_máximo : 0.03 (3% “queda máxima que o cálculo do multiplicador pode ser ampliado, diferença máxima entre uma ordem de compra e outra”)
Descrição: Define o percentual máximo de queda que o bot considerará para realizar uma recompra, mesmo após a aplicação do multiplicador_recompra. Isso pode ajudar a evitar recompras em quedas de preço muito acentuadas (embora essa interpretação possa variar dependendo da estratégia desejada).

Item 3.1c: limite_recompras : 20 (Número máximo de recompras)
Descrição: Define o número máximo de ordens de recompra que o bot pode realizar após a ordem de compra inicial. Isso ajuda a controlar o risco e evita que o bot continue comprando indefinidamente em uma tendência de queda prolongada.
Exemplo: Se o limite de recompras for 20, o bot fará a compra inicial e, se o preço continuar caindo, poderá realizar até 20 recompras adicionais.
Código Relacionado:
Python
# Verifica o limite de recompras
if contagem_recompras < estrategia['limite_recompras']:
    executar_recompra()
else:
    print("Limite de recompras atingido.")


Item 4: taxa : 0.001 (0.1% Taxa de transação)
Descrição: Define a taxa de transação cobrada pela exchange para cada ordem de compra ou venda. Este valor é importante para calcular o lucro real da operação. Assume-se que a taxa para ordens maker e taker seja a mesma neste caso.
Exemplo: Se você comprar ou vender o equivalente a 100 USDT e a taxa for de 0.1%, você pagará 0.1 USDT de taxa.
Código Relacionado:
Python
# Calcula o custo da taxa
custo_taxa_compra = preco_compra * quantidade * estrategia['taxa']
custo_taxa_venda = preco_venda * quantidade * estrategia['taxa']


Item 5: saldo_limite : 5000 (limite de saldo para as operações, 0 = uso total do saldo disponível na wallet)
Descrição: Define um limite máximo de saldo em USDT (ou moeda base) que o bot pode utilizar para realizar as operações. Se definido como 0, o bot utilizará todo o saldo disponível na sua carteira da exchange.
Exemplo: Se você definir saldo_limite como 5000, o bot não realizará operações que excedam esse valor total investido.

Item 6: lucro_reaplicar (s/n) : s (“s” usará o lucro adquirido em cada ciclo para incrementar o valor da ordem de compra (lucro adquirido no ciclo anterior ÷ (limite_recompras + 1) = a quantidade a ser acrescida nas ordens de compra do próximo ciclo ) , “n” não utiliza esta função)
Descrição: Esta opção permite reinvestir o lucro obtido em cada ciclo de negociação.
"s" (Sim): O lucro obtido no ciclo anterior será dividido pelo número total de ordens (limite de recompras + 1, que inclui a ordem inicial) e o resultado será adicionado à quantidade das ordens de compra nos ciclos subsequentes.
"n" (Não): O lucro obtido não será reinvestido nas próximas ordens de compra.
Exemplo (com "s"): Se você obteve um lucro de 10 USDT no ciclo anterior e o limite_recompras é 20, então 10 / (20 + 1) = aproximadamente 0.48 USDT serão adicionados à quantidade de cada ordem de compra no próximo ciclo.

Item 8: salvar_estrategia (s/n) : s (“s” salva a estratégia em arquivo .js, “n” continua sem salvar a configuração da estratégia)
Descrição: Esta opção permite salvar as configurações da estratégia em um arquivo com extensão .js.
"s" (Sim): As configurações atuais da estratégia serão salvas em um arquivo, permitindo que você as carregue posteriormente.
"n" (Não): As configurações da estratégia não serão salvas após a configuração atual.


Criar criptografia para armazenar Chaves API, protegidas com password do usuário

 Teste de conexão API Rest V5 Bybit Demo Trading:
(testado e funcionando)
Python
#teste de Conexão API Rest V5 Bybit Demo Trading


import requests
import hmac
import hashlib
import time
import json


# *** IMPORTANTE: Substitua pelas suas chaves de API DEMO reais ***
API_KEY = "API_KEY"  # Substitua pela sua chave de API real
API_SECRET = "SECRET_KEY"  # Substitua pelo seu segredo de API real
BASE_URL = "https://api-demo.bybit.com"  # Certifique-se de usar o URL da API DEMO


def generate_signature(secret, timestamp, recv_window, params):
    """Gera a assinatura HMAC SHA256 (Bybit V5)."""
    param_str = timestamp + API_KEY + recv_window + json.dumps(params)
    signature = hmac.new(secret.encode('utf-8'), param_str.encode('utf-8'), hashlib.sha256).hexdigest()
    return signature


def enviar_ordem_compra_mercado(valor_compra_usdt, symbol="BTCUSDT"):
    """Envia uma ordem de compra a mercado."""
    endpoint = "/v5/order/create"
    url = BASE_URL + endpoint
    timestamp = str(int(time.time() * 1000))
    recv_window = "5000"  # Valor recomendado


    params = {
        "category": "spot",
        "symbol": symbol,
        "side": "Buy",
        "orderType": "Market",
        "qty": str(valor_compra_usdt),  # Usamos orderValue com o valor em USDT
        "timeInForce": "IOC"
    }


    print(f"Parâmetros da ordem de compra: {params}")  # Print para depuração


    signature = generate_signature(API_SECRET, timestamp, recv_window, params)


    headers = {
        "Content-Type": "application/json",
        "X-BAPI-API-KEY": API_KEY,
        "X-BAPI-TIMESTAMP": timestamp,
        "X-BAPI-RECV-WINDOW": recv_window,
        "X-BAPI-SIGN": signature
    }
    try:
        response = requests.post(url, headers=headers, json=params)
        response.raise_for_status()
        data = response.json()
        if data and data['retCode'] == 0:
            print("Ordem de compra a mercado enviada com sucesso!")
            print(f"ID da Ordem: {data['result']['orderId']}")
        else:
            print(f"Erro ao enviar ordem de compra: {data}")
    except requests.exceptions.RequestException as e:
        print(f"Erro ao enviar ordem de compra: {e}")
    except Exception as e:
        print(f"Ocorreu um erro inesperado ao enviar ordem: {e}")


if __name__ == "__main__":
    # *** Certifique-se de que suas chaves de API DEMO estão configuradas corretamente ***
    # *** E que a função para obter o saldo também está usando a API DEMO se necessário ***
    # Exemplo de como você pode chamar a função de compra
    valor_compra = 300
    enviar_ordem_compra_mercado(valor_compra)




 Teste de conexão WebSocket V5 Bybit Demo Trading:
(testado e funcionando)
Python
#teste de Conexão API WebSocket V5 Bybit Demo Trading


import asyncio
import websockets
import json
import hmac
import hashlib
import time


API_KEY = "api_key"  # Substitua pela sua chave de API real
API_SECRET = "secret_key"  # Substitua pelo seu segredo de API real
WEBSOCKET_URL = "wss://stream-demo.bybit.com/v5/private"  # Corrected Demo URL


async def authenticate(websocket):
    expires = int((time.time() + 5) * 1000)  # Timestamp de expiração (5 segundos no futuro)
    sign_payload = f"GET/realtime{expires}"
    signature = hmac.new(API_SECRET.encode('utf-8'), sign_payload.encode('utf-8'), hashlib.sha256).hexdigest()


    print(f"String para Assinar (sign_payload): {sign_payload}")
    print(f"Assinatura Gerada: {signature}")


    auth_message = {
        "op": "auth",
        "args": [API_KEY, expires, signature]
    }
    await websocket.send(json.dumps(auth_message))
    response = await websocket.recv()
    print(f"Autenticação recebida: {response}")


async def subscribe_orders(websocket):
    subscribe_message = {
        "op": "subscribe",
        "args": ["order"]
    }
    await websocket.send(json.dumps(subscribe_message))
    response = await websocket.recv()
    print(f"Inscrição em ordens recebida: {response}")


async def receive_messages():
    async with websockets.connect(WEBSOCKET_URL) as websocket:
        await asyncio.sleep(0.1)  # Adiciona um pequeno delay
        await authenticate(websocket)
        await subscribe_orders(websocket)
        try:
            while True:
                message = await websocket.recv()
                print(f"Mensagem recebida: {message}")
                # Aqui você processará as atualizações de ordens
        except websockets.exceptions.ConnectionClosedError as e:
            print(f"Conexão WebSocket fechada inesperadamente: {e}")
        except Exception as e:
            print(f"Ocorreu um erro: {e}")


if __name__ == "__main__":
    asyncio.run(receive_messages())




Documento de Referência: APIs REST e WebSocket da Bybit Demo Trading para Bot em Python
1. Introdução:
Este documento resume os aspectos essenciais das APIs REST e WebSocket da Bybit para o ambiente de Demo Trading, com foco nos pontos cruciais para o desenvolvimento de um bot de negociação automatizado em Python.
2. Ambiente de Demo Trading da Bybit:
Utilize o ambiente de Demo Trading para testar suas estratégias sem risco financeiro real.
As credenciais (chaves de API) geradas para a Demo Trading são separadas das credenciais da conta real (Mainnet).
3. API REST (Demo):
URL Base: https://api-demo.bybit.com
Propósito: Comunicação síncrona (requisição-resposta) para executar ações como enviar ordens, cancelar ordens, consultar saldo, etc.
Endpoints Relevantes:
Enviar Ordem: /v5/order/create (Suporta ordens a mercado e limite).
Parâmetros importantes: category (spot), symbol (BTCUSDT), side (Buy/Sell), orderType (Market/Limit), qty (quantidade da moeda base), price (para ordens limite), timeInForce (IOC, GTC, etc.).
Cancelar Ordem: /v5/order/cancel (Requer o orderId da ordem a ser cancelada).
Consultar Saldo: /v5/account/wallet-balance (Para verificar o saldo em USDT).
Autenticação:
Requer API_KEY e API_SECRET geradas na interface de Demo Trading da Bybit.


As requisições autenticadas exigem uma assinatura (X-BAPI-SIGN) gerada usando o algoritmo HMAC-SHA256.


Função de Geração de Assinatura (Exemplo):


Python
import hmac
import hashlib
import time
import json

API_KEY = "SUA_CHAVE_DE_API_DEMO"
API_SECRET = "SUA_CHAVE_SECRETA_DEMO"

def generate_signature(secret, params):
    """Gera a assinatura HMAC SHA256 (Bybit V5)."""
    param_str = '&'.join([f"{k}={v}" for k, v in sorted(params.items())])
    sign_payload = f"{time.time_ns() // 1_000_000}{API_KEY}{5000}{param_str}"
    signature = hmac.new(secret.encode('utf-8'), sign_payload.encode('utf-8'), hashlib.sha256).hexdigest()
    return signature




Headers Comuns:


Content-Type: application/json
X-BAPI-SIGN: A assinatura gerada.
X-BAPI-SIGN-TYPE: 2
X-BAPI-TIMESTAMP: Timestamp da requisição em milissegundos.
X-BAPI-RECV-WINDOW: Janela de recebimento (em ms, geralmente 5000).
apiKey: Sua chave de API.
4. API WebSocket (Demo):
Endpoint (Streams Privados): wss://stream-demo.bybit.com/v5/private
Propósito: Comunicação assíncrona e bidirecional para receber dados em tempo real (atualizações de ordens, dados de mercado - embora para este projeto estejamos focando em ordens).
Autenticação:
Requer API_KEY e API_SECRET da Demo Trading.


A autenticação é feita enviando uma mensagem JSON específica após a conexão.


Mensagem de Autenticação:


JSON
{
    "op": "auth",
    "args": [API_KEY, expires, signature]
}




expires: Timestamp de expiração em milissegundos (alguns segundos no futuro).


Geração de Assinatura para WebSocket:


Python
import hmac
import hashlib
import time

API_KEY = "SUA_CHAVE_DE_API_DEMO"
API_SECRET = "SUA_CHAVE_SECRETA_DEMO"

def generate_websocket_signature():
    expires = int((time.time() + 5) * 1000)
    sign_payload = f"GET/realtime{expires}"
    signature = hmac.new(API_SECRET.encode('utf-8'), sign_payload.encode('utf-8'), hashlib.sha256).hexdigest()
    return expires, signature




Inscrição em Tópicos:
Para receber atualizações sobre suas ordens, você precisa se inscrever no tópico "order".


Mensagem de Inscrição:


JSON
{
    "op": "subscribe",
    "args": ["order"]
}




WS Trade is not supported (Demo): Você não pode enviar ordens diretamente através do WebSocket no ambiente de demonstração. Use a API REST para isso.
5. Pontos Cruciais para o Código em Python:
Bibliotecas: Utilize as bibliotecas requests (para API REST) e websockets (para API WebSocket).
Assíncrono (asyncio): A API WebSocket é assíncrona, então você precisará usar asyncio para gerenciar a conexão e o recebimento de mensagens.
Tratamento de Erros: Implemente tratamento de erros robusto para lidar com falhas de conexão, erros da API, etc.
Formato JSON: Tanto a API REST quanto a WebSocket utilizam o formato JSON para enviar e receber dados.
Gerenciamento de Estado: Seu bot precisará manter o controle do estado das ordens (IDs, status, preços, etc.).
Lógica de Negociação: Implemente a lógica da sua estratégia de negociação para determinar quando comprar, vender e quando enviar as ordens de recompra.
Monitoramento: Use o WebSocket para monitorar o status das ordens enviadas via REST em tempo real.
Delays: Use time.sleep() ou asyncio.sleep() para introduzir os delays necessários entre as ações.
6. Fluxo Geral da Estratégia (Conforme Descrito):
Consultar saldo (REST).
Se saldo suficiente, enviar ordem de compra a mercado (REST).
Após delay, enviar ordem de venda limite com lucro (REST).
Após pequeno delay, enviar ordem de recompra limite (REST).
Monitorar o status das ordens (WebSocket).
Implementar a lógica de cancelamento e os loops de recompra/venda conforme a sua estratégia detalhada.



